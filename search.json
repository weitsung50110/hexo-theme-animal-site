[{"title":"hexo-theme-animal的Github所有相關repositories","url":"/hexo-theme-animal-site/2024/09/10/hexo-theme-animal%E7%9A%84Github%E6%89%80%E6%9C%89%E7%9B%B8%E9%97%9Crepositories/","content":"<p><cen>介紹我用 Hexo 開發的 GitHub repositories，包括自定義的 hexo-theme-animal 主題和示例網站，並詳細列出安裝的 Node.js 版本和相關的 npm 依賴項，幫助讀者快速了解主題和插件的安裝配置。</p>\n<h2 id=\"GitHub-上的相關-repositories\"><a href=\"#GitHub-上的相關-repositories\" class=\"headerlink\" title=\"GitHub 上的相關 repositories\"></a>GitHub 上的相關 repositories</h2><p>在這篇文章中，我將介紹 GitHub 上我做的 repositories，它們都是關於 Hexo 主題的開發和使用。</p>\n<h3 id=\"1-hexo-theme-animal\"><a href=\"#1-hexo-theme-animal\" class=\"headerlink\" title=\"1. hexo-theme-animal\"></a>1. <a href=\"https://github.com/weitsung50110/hexo-theme-animal\">hexo-theme-animal</a></h3><p>這是我開發的一個 Hexo 主題，名為 <code>hexo-theme-animal</code>。這個主題提供了多種自定義選項和現代化的設計，適合用於個人博客或作品集。你可以在 <a href=\"https://github.com/weitsung50110/hexo-theme-animal\">這裡</a> 查看詳細信息和使用說明。</p>\n<h3 id=\"2-hexo-theme-animal-site\"><a href=\"#2-hexo-theme-animal-site\" class=\"headerlink\" title=\"2. hexo-theme-animal-site\"></a>2. <a href=\"https://weitsung50110.github.io/hexo-theme-animal-site/\">hexo-theme-animal-site</a></h3><p>這個 repository 包含了使用 <code>hexo-theme-animal</code> 主題的示例網站。你可以參考 <a href=\"https://weitsung50110.github.io/2024/08/08/hexo-theme-animal%E9%97%9C%E6%96%BC.ejs%E7%9A%84%E8%A8%AD%E5%AE%9A%EF%BC%8C%E5%8C%85%E6%8B%ACarchives,tag...%E7%AD%89%E7%AD%89/\">這個連結</a> 來查看完整的網站實例和部署過程。</p>\n<hr>\n<p>希望這篇文章能夠幫助你了解這些相關的 GitHub repositories。</p>\n<p>此文章也有發表在Medium上 &gt;&gt;</p>\n<ul>\n<li><a href=\"https://medium.com/@weiberson/%E4%BD%BF%E7%94%A8hexo%E5%89%B5%E4%BD%9C%E9%83%A8%E8%90%BD%E6%A0%BC%E4%B8%BB%E9%A1%8C%E6%A8%A1%E6%9D%BF-%E7%94%A8ejs%E6%89%93%E9%80%A0%E5%B0%88%E5%B1%AC%E8%87%AA%E5%B7%B1%E9%83%A8%E8%90%BD%E6%A0%BC-hexo-theme-animal-850b13a16aa5#5f43\">使用 Hexo 創作部落格主題模板：用 EJS 打造專屬自己部落格</a></li>\n</ul>\n<h2 id=\"安裝的插件版本\"><a href=\"#安裝的插件版本\" class=\"headerlink\" title=\"安裝的插件版本\"></a>安裝的插件版本</h2><h3 id=\"Node-js-版本，我裡面是安裝20-16-0版本\"><a href=\"#Node-js-版本，我裡面是安裝20-16-0版本\" class=\"headerlink\" title=\"Node.js 版本，我裡面是安裝20.16.0版本\"></a>Node.js 版本，我裡面是安裝20.16.0版本</h3><table>\n<thead>\n<tr>\n<th>REPOSITORY</th>\n<th>TAG</th>\n<th>IMAGE ID</th>\n<th>CREATED</th>\n<th>SIZE</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>node</td>\n<td>20.16.0</td>\n<td>1a8e51cfa7a5</td>\n<td>6 weeks ago</td>\n<td>1.1GB</td>\n</tr>\n</tbody></table>\n<h3 id=\"npm-依賴項，npm裡面還有安裝這些依賴\"><a href=\"#npm-依賴項，npm裡面還有安裝這些依賴\" class=\"headerlink\" title=\"npm 依賴項，npm裡面還有安裝這些依賴\"></a>npm 依賴項，npm裡面還有安裝這些依賴</h3><p>以下是 <code>npm list --depth=0</code> 輸出的依賴項列表：</p>\n<p>  root@73fbc4a3b07a:&#x2F;app&#x2F;my-blog# npm list –depth&#x3D;0<br>  <a href=\"mailto:&#104;&#101;&#120;&#111;&#x2d;&#x73;&#105;&#116;&#101;&#64;&#48;&#46;&#48;&#x2e;&#x30;\">&#104;&#101;&#120;&#111;&#x2d;&#x73;&#105;&#116;&#101;&#64;&#48;&#46;&#48;&#x2e;&#x30;</a> &#x2F;app&#x2F;my-blog<br>  +– <a href=\"mailto:&#x68;&#101;&#x78;&#111;&#45;&#103;&#101;&#x6e;&#x65;&#114;&#97;&#116;&#x6f;&#x72;&#x2d;&#97;&#x72;&#x63;&#104;&#105;&#x76;&#x65;&#64;&#50;&#x2e;&#48;&#x2e;&#x30;\">&#x68;&#101;&#x78;&#111;&#45;&#103;&#101;&#x6e;&#x65;&#114;&#97;&#116;&#x6f;&#x72;&#x2d;&#97;&#x72;&#x63;&#104;&#105;&#x76;&#x65;&#64;&#50;&#x2e;&#48;&#x2e;&#x30;</a><br>  +– <a href=\"mailto:&#x68;&#101;&#120;&#x6f;&#x2d;&#103;&#x65;&#110;&#x65;&#x72;&#x61;&#116;&#x6f;&#x72;&#x2d;&#99;&#97;&#116;&#x65;&#103;&#x6f;&#114;&#x79;&#64;&#x32;&#46;&#x30;&#46;&#x30;\">&#x68;&#101;&#120;&#x6f;&#x2d;&#103;&#x65;&#110;&#x65;&#x72;&#x61;&#116;&#x6f;&#x72;&#x2d;&#99;&#97;&#116;&#x65;&#103;&#x6f;&#114;&#x79;&#64;&#x32;&#46;&#x30;&#46;&#x30;</a><br>  +– <a href=\"mailto:&#104;&#x65;&#120;&#111;&#x2d;&#x67;&#101;&#x6e;&#101;&#114;&#x61;&#x74;&#111;&#x72;&#45;&#105;&#x6e;&#x64;&#x65;&#120;&#64;&#52;&#x2e;&#x30;&#x2e;&#x30;\">&#104;&#x65;&#120;&#111;&#x2d;&#x67;&#101;&#x6e;&#101;&#114;&#x61;&#x74;&#111;&#x72;&#45;&#105;&#x6e;&#x64;&#x65;&#120;&#64;&#52;&#x2e;&#x30;&#x2e;&#x30;</a><br>  +– <a href=\"mailto:&#x68;&#x65;&#x78;&#111;&#45;&#103;&#x65;&#x6e;&#101;&#x72;&#97;&#116;&#x6f;&#x72;&#x2d;&#115;&#101;&#x61;&#x72;&#x63;&#104;&#x64;&#x62;&#x40;&#x31;&#x2e;&#52;&#46;&#x31;\">&#x68;&#x65;&#x78;&#111;&#45;&#103;&#x65;&#x6e;&#101;&#x72;&#97;&#116;&#x6f;&#x72;&#x2d;&#115;&#101;&#x61;&#x72;&#x63;&#104;&#x64;&#x62;&#x40;&#x31;&#x2e;&#52;&#46;&#x31;</a><br>  +– <a href=\"mailto:&#104;&#101;&#x78;&#x6f;&#45;&#103;&#101;&#110;&#101;&#114;&#x61;&#x74;&#111;&#114;&#45;&#115;&#x69;&#116;&#x65;&#109;&#x61;&#x70;&#x40;&#x33;&#46;&#48;&#x2e;&#x31;\">&#104;&#101;&#x78;&#x6f;&#45;&#103;&#101;&#110;&#101;&#114;&#x61;&#x74;&#111;&#114;&#45;&#115;&#x69;&#116;&#x65;&#109;&#x61;&#x70;&#x40;&#x33;&#46;&#48;&#x2e;&#x31;</a><br>  +– <a href=\"mailto:&#104;&#x65;&#x78;&#x6f;&#45;&#x67;&#x65;&#110;&#101;&#114;&#97;&#116;&#111;&#114;&#x2d;&#116;&#97;&#103;&#64;&#x32;&#x2e;&#48;&#x2e;&#x30;\">&#104;&#x65;&#x78;&#x6f;&#45;&#x67;&#x65;&#110;&#101;&#114;&#97;&#116;&#111;&#114;&#x2d;&#116;&#97;&#103;&#64;&#x32;&#x2e;&#48;&#x2e;&#x30;</a><br>  +– <a href=\"mailto:&#x68;&#101;&#x78;&#111;&#x2d;&#x72;&#101;&#x6e;&#x64;&#x65;&#x72;&#101;&#x72;&#45;&#x65;&#x6a;&#115;&#64;&#x32;&#46;&#48;&#x2e;&#x30;\">&#x68;&#101;&#x78;&#111;&#x2d;&#x72;&#101;&#x6e;&#x64;&#x65;&#x72;&#101;&#x72;&#45;&#x65;&#x6a;&#115;&#64;&#x32;&#46;&#48;&#x2e;&#x30;</a><br>  +– <a href=\"mailto:&#x68;&#x65;&#120;&#x6f;&#x2d;&#114;&#x65;&#110;&#100;&#x65;&#114;&#101;&#x72;&#x2d;&#x6d;&#x61;&#x72;&#x6b;&#101;&#x64;&#x40;&#54;&#x2e;&#x33;&#x2e;&#48;\">&#x68;&#x65;&#120;&#x6f;&#x2d;&#114;&#x65;&#110;&#100;&#x65;&#114;&#101;&#x72;&#x2d;&#x6d;&#x61;&#x72;&#x6b;&#101;&#x64;&#x40;&#54;&#x2e;&#x33;&#x2e;&#48;</a><br>  +– <a href=\"mailto:&#x68;&#101;&#120;&#111;&#45;&#x72;&#x65;&#x6e;&#x64;&#x65;&#x72;&#101;&#x72;&#45;&#115;&#x74;&#121;&#108;&#117;&#115;&#x40;&#x33;&#x2e;&#48;&#x2e;&#49;\">&#x68;&#101;&#120;&#111;&#45;&#x72;&#x65;&#x6e;&#x64;&#x65;&#x72;&#101;&#x72;&#45;&#115;&#x74;&#121;&#108;&#117;&#115;&#x40;&#x33;&#x2e;&#48;&#x2e;&#49;</a><br>  +– <a href=\"mailto:&#x68;&#x65;&#120;&#111;&#x2d;&#115;&#x65;&#x72;&#118;&#101;&#x72;&#x40;&#51;&#x2e;&#x30;&#x2e;&#48;\">&#x68;&#x65;&#120;&#111;&#x2d;&#115;&#x65;&#x72;&#118;&#101;&#x72;&#x40;&#51;&#x2e;&#x30;&#x2e;&#48;</a><br>  +– <a href=\"mailto:&#x68;&#101;&#120;&#x6f;&#x2d;&#116;&#104;&#101;&#x6d;&#x65;&#x2d;&#x6c;&#97;&#x6e;&#x64;&#115;&#x63;&#97;&#112;&#x65;&#x40;&#49;&#x2e;&#x30;&#x2e;&#x30;\">&#x68;&#101;&#120;&#x6f;&#x2d;&#116;&#104;&#101;&#x6d;&#x65;&#x2d;&#x6c;&#97;&#x6e;&#x64;&#115;&#x63;&#97;&#112;&#x65;&#x40;&#49;&#x2e;&#x30;&#x2e;&#x30;</a><br>  &#96;– <a href=\"mailto:&#x68;&#x65;&#x78;&#111;&#x40;&#x37;&#46;&#x33;&#x2e;&#x30;\">&#x68;&#x65;&#x78;&#111;&#x40;&#x37;&#46;&#x33;&#x2e;&#x30;</a></p>\n<ul>\n<li><p><strong>Hexo 及相關插件</strong></p>\n<ul>\n<li><code>hexo</code> @7.3.0</li>\n<li><code>hexo-generator-archive</code> @2.0.0</li>\n<li><code>hexo-generator-category</code> @2.0.0</li>\n<li><code>hexo-generator-index</code> @4.0.0</li>\n<li><code>hexo-generator-searchdb</code> @1.4.1</li>\n<li><code>hexo-generator-sitemap</code> @3.0.1”</li>\n<li><code>hexo-generator-tag</code> @2.0.0</li>\n<li><code>hexo-renderer-ejs</code> @2.0.0</li>\n<li><code>hexo-renderer-marked</code> @6.3.0</li>\n<li><code>hexo-renderer-stylus</code> @3.0.1</li>\n<li><code>hexo-server</code> @3.0.0</li>\n<li><code>hexo-theme-landscape</code> @1.0.0</li>\n</ul>\n</li>\n<li><p><strong>Moment.js 及其時區支持</strong></p>\n<ul>\n<li><code>moment-timezone</code> @0.5.45</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"推薦需要npm安裝的套件\"><a href=\"#推薦需要npm安裝的套件\" class=\"headerlink\" title=\"推薦需要npm安裝的套件\"></a>推薦需要npm安裝的套件</h2><pre><code>- npm install hexo-generator-sitemap --save\n- npm install moment-timezone --save\n- npm install hexo-generator-searchdb --save\n- npm install gitalk --save\n</code></pre>\n<h2 id=\"root下面的-config-yml設定統整\"><a href=\"#root下面的-config-yml設定統整\" class=\"headerlink\" title=\"root下面的_config.yml設定統整\"></a>root下面的_config.yml設定統整</h2><p>URL</p>\n<pre><code># URL\nurl: http://localhost:4000\nurl: url: https://weitsung50110.github.io/hexo-theme-animal-site/\n</code></pre>\n<p>語言</p>\n<pre><code>language: cn\nlanguage: en\n</code></pre>\n<p>配置來啟用 JSON 格式的搜尋資料</p>\n<pre><code>search:\n  path: search.json\n  field: post\n  content: true\n</code></pre>\n<p>Pagination設置per_page為0，來顯示所有文章</p>\n<ol>\n<li><p>63行左右</p>\n<pre><code> ## Set per_page to 0 to disable pagination \n per_page: 0\n</code></pre>\n</li>\n<li><p>88行左右</p>\n<pre><code> # per_page: Posts displayed per page. (0 = disable pagination)\n # order_by: Posts order. (Order by date descending by default)\n index_generator:\n   path: &#39;&#39;\n   per_page: 0\n</code></pre>\n</li>\n</ol>\n<p>GitHub 的評論系統</p>\n<pre><code>gitalk:\n  clientID: &#39;YOUR_CLIENT_ID&#39;\n  clientSecret: &#39;YOUR_CLIENT_SECRET&#39;\n  repo: &#39;weitsung50110.github.io&#39;  # 使用你的 GitHub Pages 倉庫\n  owner: &#39;weitsung50110&#39;            # 你的 GitHub 用戶名\n  admin: [&#39;weitsung50110&#39;]          # 管理員列表\n  id: location.pathname.slice(0, 50)\n  distractionFreeMode: false\n</code></pre>\n<h3 id=\"SEO-提供-Sitemap\"><a href=\"#SEO-提供-Sitemap\" class=\"headerlink\" title=\"SEO - 提供 Sitemap\"></a>SEO - 提供 Sitemap</h3><p>使用 Hexo 的內建功能生成 Sitemap，這樣搜尋引擎更容易找到你的頁面：</p>\n<p>  npm install hexo-generator-sitemap –save</p>\n<p>註冊並提交你的網站至 Google Search Console，這樣可以跟蹤你的網站表現，並獲得搜尋引擎的回饋。</p>\n<h3 id=\"文章的時區設定\"><a href=\"#文章的時區設定\" class=\"headerlink\" title=\"文章的時區設定\"></a>文章的時區設定</h3><p>希望在 Hexo 的模板中顯示正確的日期時間格式，並且希望顯示特定的時區（例如台北時間）</p>\n<ol>\n<li>確保你已經安裝了 moment-timezone</li>\n</ol>\n<p>  npm install moment-timezone –save</p>\n<ol start=\"2\">\n<li><p>修改 EJS 模板的post.ejs</p>\n<pre><code> &lt;article class=&quot;post&quot;&gt;\n &lt;h1&gt;&lt;%= page.title %&gt;&lt;/h1&gt;\n &lt;!-- &lt;p class=&quot;post-date&quot;&gt;&lt;%- __(&#39;post.date&#39;) %&gt;&lt;%= page.date %&gt;&lt;/p&gt; --&gt;\n &lt;p class=&quot;post-date&quot;&gt;&lt;%- __(&#39;post.date&#39;) %&gt;&lt;%= moment(page.date).tz(&#39;Asia/Taipei&#39;).format(&#39;YYYY-MM-DD HH:mm:ss&#39;) %&gt;&lt;/p&gt;\n</code></pre>\n</li>\n</ol>\n<p>如果你要更改成其他的時區，更改tz(‘Asia&#x2F;Taipei’)就好了~</p>\n<h3 id=\"加入文章搜尋功能-Search-function\"><a href=\"#加入文章搜尋功能-Search-function\" class=\"headerlink\" title=\"加入文章搜尋功能 Search function\"></a>加入文章搜尋功能 Search function</h3><p>需要安裝 hexo-generator-searchdb 插件，這個插件可以生成一個 .json 檔案作為搜尋資料庫</p>\n<pre><code>npm install hexo-generator-searchdb --save\n</code></pre>\n<p>打開你的 Hexo 根目錄下的 _config.yml，加入以下配置來啟用 JSON 格式的搜尋資料：</p>\n<pre><code>search:\n  path: search.json\n  field: post\n  content: true\n</code></pre>\n<p>path: search.json 指定生成 .json 檔案。<br>field: post 指定只索引文章。如果你還想要索引頁面，將它改為 all。<br>content: true 指定是否包括文章的內容。若只需要標題和摘要，可將其設為 false。<br>在&#x2F;source&#x2F;js&#x2F;search.js中有一個，路徑記得要修改~ 因為我的專案名字是在hexo-theme-animal-site，所以需要加上&#x2F;hexo-theme-animal-site才能夠抓到。<br>hexo-theme-animal-site是我自己設定的專案名字，你需要根據你創建的專案名字來進行更改。</p>\n<pre><code>// 設置 JSON 文件的路徑\nconst searchDataUrl = &#39;/hexo-theme-animal-site/search.json&#39;;\n</code></pre>\n<p>若沒有改的話會出現以下錯誤</p>\n<pre><code>GET https://weitsung50110.github.io/search.json 404 (Not Found)\n(anonymous) @ search.js:9\nsearch.js:54 搜尋資料載入錯誤: Error: 網絡錯誤，無法加載 search.json\n    at search.js:12:13\n(anonymous) @ search.js:54\nPromise.catch\n(anonymous) @ search.js:54\n</code></pre>\n<p>因為預設會從<a href=\"https://weitsung50110.github.io/\">https://weitsung50110.github.io</a> 抓取search.json，但我是在repo中架網站，所以路徑會變成<a href=\"https://weitsung50110.github.io/hexo-theme-animal-site/search.json%E3%80%82\">https://weitsung50110.github.io/hexo-theme-animal-site/search.json。</a> 可以自己輸入<a href=\"https://weitsung50110.github.io/hexo-theme-animal-site/search.json\">https://weitsung50110.github.io/hexo-theme-animal-site/search.json</a> 之類的網址去看看會不會出現.json檔案!!</p>\n<h3 id=\"Pagination顯示所有文章\"><a href=\"#Pagination顯示所有文章\" class=\"headerlink\" title=\"Pagination顯示所有文章\"></a>Pagination顯示所有文章</h3><p>在root下面的_config.yml設置per_page為0:</p>\n<ul>\n<li>當你發現archives的文章總數有少</li>\n<li>當你發現index.ejs的文章總數量num有少<br><strong>就記得改_config.yml要改</strong></li>\n</ul>\n<ol>\n<li><p>63行左右</p>\n<pre><code> # Pagination 設為 0 以顯示所有文章。\n ## Set per_page to 0 to disable pagination \n per_page: 0\n</code></pre>\n</li>\n<li><p>88行左右</p>\n<pre><code> # per_page: Posts displayed per page. (0 = disable pagination)\n # order_by: Posts order. (Order by date descending by default)\n index_generator:\n   path: &#39;&#39;\n   per_page: 0\n</code></pre>\n</li>\n</ol>\n<h2 id=\"GitHub-的評論系統\"><a href=\"#GitHub-的評論系統\" class=\"headerlink\" title=\"GitHub 的評論系統\"></a>GitHub 的評論系統</h2><p>在post.ejs中，加入下面這個語法。</p>\n<pre><code>&lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.css&quot; /&gt;\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  var gitalk = new Gitalk(&#123;\n    clientID: &#39;&lt;%= config.gitalk.clientID %&gt;&#39;,\n    clientSecret: &#39;&lt;%= config.gitalk.clientSecret %&gt;&#39;,  // 替換為最新的 client secret\n    repo: &#39;&lt;%= config.gitalk.repo %&gt;&#39;,\n    owner: &#39;&lt;%= config.gitalk.owner %&gt;&#39;,\n    admin: [&#39;weitsung50110&#39;],\n    id: location.pathname.slice(0, 50),\n    distractionFreeMode: false\n  &#125;);\n  gitalk.render(&#39;gitalk-container&#39;);\n&lt;/script&gt;\n</code></pre>\n<p>Hexo 根目錄下的 _config.yml中加入</p>\n<pre><code>gitalk:\n  clientID: &#39;YOUR_CLIENT_ID&#39;\n  clientSecret: &#39;YOUR_CLIENT_SECRET&#39;\n  repo: &#39;weitsung50110.github.io&#39;  # 使用你的 GitHub Pages 倉庫\n  owner: &#39;weitsung50110&#39;            # 你的 GitHub 用戶名\n  admin: [&#39;weitsung50110&#39;]          # 管理員列表\n  id: location.pathname.slice(0, 50)\n  distractionFreeMode: false\n</code></pre>\n","categories":["Hexo主題"],"tags":["GitHub","開源","Hexo主題","JavaScript"]},{"title":"hexo-theme-animal的RWD教學","url":"/hexo-theme-animal-site/2024/09/03/hexo-theme-animal%E7%9A%84RWD%E6%95%99%E5%AD%B8/","content":"<p><cen>介紹如何將多個 CSS 文件合併為一個主文件以實現響應式設計，並解釋 @media 查詢的使用方式，以及如何在不同屏幕寬度下覆蓋和調整樣式。</p>\n<h3 id=\"Q-我現在有-6-個-css-檔案，依照不同-ejs-進行分類。我現在想要做成-RWD-響應式網站，請問怎麼辦？\"><a href=\"#Q-我現在有-6-個-css-檔案，依照不同-ejs-進行分類。我現在想要做成-RWD-響應式網站，請問怎麼辦？\" class=\"headerlink\" title=\"Q: 我現在有 6 個 .css 檔案，依照不同 .ejs 進行分類。我現在想要做成 RWD 響應式網站，請問怎麼辦？\"></a>Q: 我現在有 6 個 .css 檔案，依照不同 .ejs 進行分類。我現在想要做成 RWD 響應式網站，請問怎麼辦？</h3><h3 id=\"A-1-合併所有-CSS-文件\"><a href=\"#A-1-合併所有-CSS-文件\" class=\"headerlink\" title=\"A: 1. 合併所有 CSS 文件\"></a>A: 1. 合併所有 CSS 文件</h3><p>首先，將所有 CSS 文件的內容合併到一個主 CSS 文件中，例如 <code>main.css</code>。這樣可以集中管理樣式，並在一個地方進行響應式設計的調整。</p>\n<pre><code>    /* main.css */\n    /* 引入其他 CSS 文件 */\n    @import url(&#39;style.css&#39;);\n    @import url(&#39;style_archives.css&#39;);\n    @import url(&#39;style_header.css&#39;);\n    @import url(&#39;style_index_post.css&#39;);\n    @import url(&#39;style_post.css&#39;);\n    @import url(&#39;style_sidebar.css&#39;);\n\n    /* 響應式設計 */\n    @media (max-width: 768px) &#123;\n        .home-intro h2 &#123;\n        font-size: 1.5em;\n        &#125;\n    \n        header &#123;\n        flex-direction: column;\n        &#125;\n    \n        .header-content &#123;\n        flex-direction: column;\n        &#125;\n    \n        nav &#123;\n        flex-direction: column;\n        align-items: flex-start;\n        &#125;\n    \n        nav a &#123;\n        margin-bottom: 10px;\n        &#125;\n    \n        /* Archives 主內容 */\n        main &#123;\n        padding: 10px;\n        &#125;\n    &#125;\n    \n    @media (max-width: 480px) &#123;\n        .home-intro h2 &#123;\n        font-size: 1.2em;\n        &#125;\n    \n        header &#123;\n        padding: 15px;\n        &#125;\n    \n        .header-content &#123;\n        flex-direction: column;\n        align-items: center;\n        &#125;\n    \n        nav &#123;\n        align-items: center;\n        &#125;\n    \n        button &#123;\n        padding: 8px 16px;\n        font-size: 0.9em;\n        &#125;\n    \n        /* Archives 主內容 */\n        main &#123;\n        padding: 5px;\n        &#125;\n    &#125;\n</code></pre>\n<h3 id=\"Q-media-放在-css-最下面，代表當寬度小於-480px-時，它會把-header-從原本的大小改成新的大小嗎？會覆蓋原本的樣式嗎？\"><a href=\"#Q-media-放在-css-最下面，代表當寬度小於-480px-時，它會把-header-從原本的大小改成新的大小嗎？會覆蓋原本的樣式嗎？\" class=\"headerlink\" title=\"Q: @media 放在 .css 最下面，代表當寬度小於 480px 時，它會把 header 從原本的大小改成新的大小嗎？會覆蓋原本的樣式嗎？\"></a>Q: @media 放在 .css 最下面，代表當寬度小於 480px 時，它會把 header 從原本的大小改成新的大小嗎？會覆蓋原本的樣式嗎？</h3><h3 id=\"A-是的。\"><a href=\"#A-是的。\" class=\"headerlink\" title=\"A: 是的。\"></a>A: 是的。</h3><p><code>@media</code> 查詢在 CSS 文件中的位置確實會影響它的應用，但 <code>@media</code> 查詢的作用是根據條件（如屏幕寬度）覆蓋或添加樣式。</p>\n<h3 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h3><ol>\n<li><p><strong>基本樣式</strong>：在 CSS 文件中，首先定義的樣式是對所有設備和屏幕尺寸的基礎樣式。 </p>\n</li>\n<li><p><strong>媒體查詢</strong>：<code>@media</code> 查詢用於在特定條件下（如屏幕寬度小於 480px）覆蓋或添加樣式。這些樣式會在滿足條件時應用並覆蓋基礎樣式。</p>\n<pre><code> 這是範例唷~~\n /* 基礎樣式 */\n header &#123;\n background: linear-gradient(135deg, #81d4fa, #4fc3f7);\n padding: 20px;\n display: flex;\n flex-direction: row;\n align-items: center;\n &#125;\n\n /* 響應式設計 */\n @media (max-width: 768px) &#123;\n header &#123;\n     flex-direction: column;\n     padding: 15px;\n &#125;\n &#125;\n\n @media (max-width: 480px) &#123;\n header &#123;\n     padding: 10px;\n &#125;\n &#125;\n</code></pre>\n</li>\n</ol>\n<h3 id=\"解釋：\"><a href=\"#解釋：\" class=\"headerlink\" title=\"解釋：\"></a>解釋：</h3><ul>\n<li><strong>基礎樣式</strong>：所有設備和屏幕尺寸都會首先應用這些樣式。<code>header</code> 元素會有線性漸變背景、20px 的內邊距，並以橫向排列方式顯示內容。 </li>\n<li><strong>媒體查詢</strong>： * 當屏幕寬度小於等於 768px 時，<code>header</code> 的顯示方式會變成縱向排列（<code>flex-direction: column</code>），內邊距變為 15px。</li>\n<li>當屏幕寬度小於等於 768px 時，<code>header</code> 的顯示方式會變成縱向排列（<code>flex-direction: column</code>），內邊距變為 15px。 * 當屏幕寬度小於等於 480px 時，<code>header</code> 的內邊距進一步減少為 10px。</li>\n</ul>\n<h3 id=\"覆蓋和添加\"><a href=\"#覆蓋和添加\" class=\"headerlink\" title=\"覆蓋和添加\"></a>覆蓋和添加</h3><p>當屏幕寬度小於 768px 時，第一個媒體查詢會將 <code>header</code> 的排列方式從橫向改為縱向，並修改內邊距為 15px。當屏幕寬度進一步縮小到 480px 以下時，第二個媒體查詢會進一步調整內邊距為 10px。這樣，第二個媒體查詢中的樣式會在第一個媒體查詢的樣式基礎上進行覆蓋。</p>\n<h3 id=\"載入順序\"><a href=\"#載入順序\" class=\"headerlink\" title=\"載入順序\"></a>載入順序</h3><p>CSS 的載入順序確保了後面定義的樣式會覆蓋前面的樣式。媒體查詢本身不會影響 CSS 文件的順序，只是根據條件選擇性地應用樣式。無論媒體查詢放在 CSS 文件的哪個位置，只要它們符合條件，它們就會生效並覆蓋之前的樣式。 這種層疊和覆蓋的機制使得響應式設計變得靈活且易於管理。</p>\n","categories":["Hexo主題"],"tags":["開源","Hexo主題","JavaScript","RWD"]},{"title":"hexo-theme-animal關於.ejs的設定，包括archives,tag...等等","url":"/hexo-theme-animal-site/2024/08/09/hexo-theme-animal%E9%97%9C%E6%96%BC.ejs%E7%9A%84%E8%A8%AD%E5%AE%9A%EF%BC%8C%E5%8C%85%E6%8B%ACarchives,tag...%E7%AD%89%E7%AD%89/","content":"<p><cen>有bug的時候可以看看，因為我記憶力不好:”) 本文探討 Hexo 主題的布局與命名規則，分析如何正確配置路由，避免連結錯誤，並總結 url_for 函數在靜態資源管理中的應用。</p>\n<h3 id=\"樹狀圖\"><a href=\"#樹狀圖\" class=\"headerlink\" title=\"樹狀圖\"></a>樹狀圖</h3><pre><code>    my-blog/\n    └── themes/\n    └── themes/hexo-theme-animal/\n            └── layout/\n            ├── _partial/\n            │   ├── footer.ejs\n            │   ├── head.ejs\n            │   ├── header.ejs\n            │   ├── popup_tag.ejs\n            │   ├── search-results.ejs\n            │   └── sidebar.ejs\n            ├── archive.ejs\n            ├── category.ejs\n            ├── index.ejs\n            ├── layout.ejs\n            ├── post.ejs\n            └── tag.ejs\n</code></pre>\n<h3 id=\"錯誤\"><a href=\"#錯誤\" class=\"headerlink\" title=\"錯誤\"></a>錯誤</h3><p>當 <code>title</code> 設為 <code>archives</code> 的時候，儘管 <code>layout</code> 設定為 <code>archives</code>，但總會連到 <code>index.ejs</code> 上面。應該是 <code>/archives</code> 路徑已經預設被指向 <code>index.ejs</code> 了。</p>\n<p>所以歸檔的部分，我決定換名字，改為 <code>archives_N</code>。</p>\n<h3 id=\"正確\"><a href=\"#正確\" class=\"headerlink\" title=\"正確\"></a>正確</h3><p>命名的時候輸入 <code>archive.ejs</code> 會自動導入 <code>archive.ejs</code> 裡面。如果 <code>title</code> 設為 <code>archives.ejs</code> 的時候，當然會沒有反應，導致變成連到 <code>index.ejs</code> 上面。</p>\n<h4 id=\"一篇文章只能夠有一個categories。\"><a href=\"#一篇文章只能夠有一個categories。\" class=\"headerlink\" title=\"一篇文章只能夠有一個categories。\"></a>一篇文章只能夠有一個<code>categories</code>。</h4><h3 id=\"tag-ejs\"><a href=\"#tag-ejs\" class=\"headerlink\" title=\"tag.ejs\"></a>tag.ejs</h3><p><code>tag.ejs</code> 才抓得到。如果打 <code>tags.ejs</code> 會抓不到。</p>\n<h3 id=\"當本地-css-看的到改變，上傳到-GitHub-Pages-卻看不到改變？！\"><a href=\"#當本地-css-看的到改變，上傳到-GitHub-Pages-卻看不到改變？！\" class=\"headerlink\" title=\"當本地 .css 看的到改變，上傳到 GitHub Pages 卻看不到改變？！\"></a>當本地 .css 看的到改變，上傳到 GitHub Pages 卻看不到改變？！</h3><p>進去 <code>/public</code> 裡面的 <code>.css</code> 查看更改的語法是否還在。當執行 <code>hugo g -d</code> 後，有些 CSS 語法會自己消失 &gt;&lt;</p>\n<h3 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h3><p><strong><code>url_for</code> 函數的用途</strong>： </p>\n<ul>\n<li>用於生成靜態資源的 URL（如 CSS、JavaScript、圖片等）。 </li>\n<li>用於生成網站文章和頁面的 URL。 </li>\n<li>url_for 會生成相對於網站根目錄的 URL。例如，url_for(‘css&#x2F;style.css’) 會生成 &#x2F;css&#x2F;style.css。這樣的 URL 可以直接用於靜態資源，如 CSS、JavaScript 和圖片。</li>\n</ul>\n<p><strong>如何使用</strong>： </p>\n<ul>\n<li><p>在模板中使用 <code>&lt;%- url_for(&#39;path&#39;) %&gt;</code> 來生成正確的 URL</p>\n<pre><code>  &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%- url_for(&#39;css/style.css&#39;) %&gt;&quot;&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%- url_for(&#39;css/style_post.css&#39;) %&gt;&quot;&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%- url_for(&#39;css/style_header.css&#39;) %&gt;&quot;&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%- url_for(&#39;css/style_sidebar.css&#39;) %&gt;&quot;&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%- url_for(&#39;css/style_archives.css&#39;) %&gt;&quot;&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%- url_for(&#39;css/style_index_post.css&#39;) %&gt;&quot;&gt;\n</code></pre>\n</li>\n</ul>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li>layout檔案的命名參考下面這個repo基本不會錯<br><a href=\"https://github.com/henryhuang/hexo-theme-aloha/tree/master/layout\">https://github.com/henryhuang/hexo-theme-aloha/tree/master/layout</a></li>\n</ul>\n","categories":["Hexo主題"],"tags":["開源","Hexo主題","JavaScript","EJS"]}]